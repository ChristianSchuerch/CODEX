/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.akoya.codex.upload;

import org.apache.commons.lang3.StringUtils;
import javax.swing.*;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 *
 * @author Nikolay Samusik
 */
public class ExperimentView extends javax.swing.JPanel {

    /**
     * Creates new form ExperimentView
     */
    public ExperimentView() {
        initComponents();
        val3.setModel(new DefaultComboBoxModel<String>(Experiment.microscopeTypes));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txtDir = new JTextField();
        val1 = new JTextField();
        jTextField1 = new JTextField();
        val2 = new JTextField();
        val3 = new javax.swing.JComboBox<>();
        val4 = new javax.swing.JComboBox<>();
        val23 = new javax.swing.JComboBox<>();
        val5 = new JTextField();
        val6 = new JTextField();
        val7 = new JTextField();
        val8 = new JTextField();
        val9 = new JTextField();
        val10 = new javax.swing.JComboBox<>();
        val11 = new JTextField();
        val21 = new JTextField();
        val12 = new JSpinner();
        val13 = new JTextField();
        val14 = new JTextField();
        val15 = new JTextField();
        val16 = new javax.swing.JComboBox<>();
        val17 = new JTextField();
        val18 = new JTextField();
        val19 = new JTextField();
        val20 = new JTextField();
        jPanel1 = new javax.swing.JPanel();
        rb_HandE_yes = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bestFocusCycleLabel = new JLabel();
        bestFocusChannelLabel = new JLabel();
        driftReferenceLabel = new JLabel();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Experimental Details"));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, BoxLayout.PAGE_AXIS));

        txtDir.setText("...");
        txtDir.setEnabled(false);
        txtDir.setMaximumSize(new java.awt.Dimension(3000, 20));
        txtDir.setMinimumSize(new java.awt.Dimension(300, 20));
        txtDir.setPreferredSize(new java.awt.Dimension(3000, 20));
        txtDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtDirMouseReleased(evt);
            }
        });
        txtDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirActionPerformed(evt);
            }
        });
        jPanel4.add(txtDir);

        val1.setText("<Enter here>");
        val1.setMaximumSize(new java.awt.Dimension(3000, 20));
        val1.setMinimumSize(new java.awt.Dimension(300, 20));
        val1.setPreferredSize(new java.awt.Dimension(3000, 20));
        val1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val1ActionPerformed(evt);
            }
        });
        jPanel4.add(val1);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel4.add(jTextField1);

        val2.setText("CODEX-MPI");
        val2.setMaximumSize(new java.awt.Dimension(3000, 20));
        val2.setMinimumSize(new java.awt.Dimension(300, 20));
        val2.setPreferredSize(new java.awt.Dimension(3000, 20));
        val2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val2ActionPerformed(evt);
            }
        });
        jPanel4.add(val2);
        jPanel4.add(val3);

        val4.setModel(new DefaultComboBoxModel<>(new String[] { "Microvolution", "none" }));
        val4.setMaximumSize(new java.awt.Dimension(3000, 20));
        val4.setMinimumSize(new java.awt.Dimension(300, 20));
        val4.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(val4);

        val23.setModel(new DefaultComboBoxModel<>(new String[] { "air", "water", "oil" }));
        val23.setMaximumSize(new java.awt.Dimension(3000, 20));
        val23.setMinimumSize(new java.awt.Dimension(300, 20));
        val23.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(val23);

        val5.setText("20");
        val5.setInputVerifier(integerVerifier);
        val5.setMaximumSize(new java.awt.Dimension(3000, 20));
        val5.setMinimumSize(new java.awt.Dimension(300, 20));
        val5.setPreferredSize(new java.awt.Dimension(3000, 20));
        val5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val5ActionPerformed(evt);
            }
        });
        jPanel4.add(val5);

        val6.setText("0.75");
        val6.setInputVerifier(doubleVerifier);
        val6.setMaximumSize(new java.awt.Dimension(3000, 20));
        val6.setMinimumSize(new java.awt.Dimension(300, 20));
        val6.setPreferredSize(new java.awt.Dimension(3000, 20));
        val6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val6ActionPerformed(evt);
            }
        });
        jPanel4.add(val6);

        val7.setText("377.442");
        val7.setInputVerifier(doubleVerifier);
        val7.setMaximumSize(new java.awt.Dimension(3000, 20));
        val7.setMinimumSize(new java.awt.Dimension(300, 20));
        val7.setPreferredSize(new java.awt.Dimension(3000, 20));
        val7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val7ActionPerformed(evt);
            }
        });
        jPanel4.add(val7);

        val8.setText("1500");
        val8.setInputVerifier(doubleVerifier);
        val8.setMaximumSize(new java.awt.Dimension(3000, 20));
        val8.setMinimumSize(new java.awt.Dimension(300, 20));
        val8.setPreferredSize(new java.awt.Dimension(3000, 20));
        val8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val8ActionPerformed(evt);
            }
        });
        jPanel4.add(val8);


        val9.setInputVerifier(integerVerifier);
        val9.setMaximumSize(new java.awt.Dimension(3000, 20));
        val9.setMinimumSize(new java.awt.Dimension(300, 20));
        val9.setPreferredSize(new java.awt.Dimension(3000, 20));
        val9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val9ActionPerformed(evt);
            }
        });
        jPanel4.add(val9);

        val10.setModel(new DefaultComboBoxModel<>(new String[] { "grayscale", "color" }));
        val10.setMaximumSize(new java.awt.Dimension(3000, 20));
        val10.setMinimumSize(new java.awt.Dimension(300, 20));
        val10.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(val10);

        val11.setText("CH1;CH2;CH3;CH4");
        val11.setMaximumSize(new java.awt.Dimension(3000, 20));
        val11.setMinimumSize(new java.awt.Dimension(300, 20));
        val11.setPreferredSize(new java.awt.Dimension(3000, 20));
        val11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val11ActionPerformed(evt);
            }
        });
        jPanel4.add(val11);

        val21.setText("425;525;595;670");
        val21.setMaximumSize(new java.awt.Dimension(3000, 20));
        val21.setMinimumSize(new java.awt.Dimension(300, 20));
        val21.setPreferredSize(new java.awt.Dimension(3000, 20));
        val21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val21ActionPerformed(evt);
            }
        });
        jPanel4.add(val21);

        val12.setModel(new SpinnerNumberModel(1, 1, 200, 1));
        val12.setMaximumSize(new java.awt.Dimension(3000, 20));
        val12.setMinimumSize(new java.awt.Dimension(300, 20));
        val12.setPreferredSize(new java.awt.Dimension(3000, 20));
        val12.setValue(Integer.parseInt("1"));
        val12.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor)val12.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        jPanel4.add(val12);

        driftReference = new JSpinner();
        driftReference.setModel(new SpinnerNumberModel(1, 1, 200, 1));
        driftReference.setMaximumSize(new java.awt.Dimension(3000, 20));
        driftReference.setMinimumSize(new java.awt.Dimension(300, 20));
        driftReference.setPreferredSize(new java.awt.Dimension(3000, 20));
        driftReference.setValue(Integer.parseInt("1"));
        driftReference.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor)driftReference.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        jPanel4.add(driftReference);

        bestFocusChannel = new JSpinner();
        bestFocusChannel.setModel(new SpinnerNumberModel(1, 1, 200, 1));
        bestFocusChannel.setMaximumSize(new java.awt.Dimension(3000, 20));
        bestFocusChannel.setMinimumSize(new java.awt.Dimension(300, 20));
        bestFocusChannel.setPreferredSize(new java.awt.Dimension(3000, 20));
        bestFocusChannel.setValue(Integer.parseInt("1"));
        bestFocusChannel.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor)bestFocusChannel.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        jPanel4.add(bestFocusChannel);

        bestFocusCycle = new JSpinner();
        bestFocusCycle.setModel(new SpinnerNumberModel(1, 1, 200, 1));
        bestFocusCycle.setMaximumSize(new java.awt.Dimension(3000, 20));
        bestFocusCycle.setMinimumSize(new java.awt.Dimension(300, 20));
        bestFocusCycle.setPreferredSize(new java.awt.Dimension(3000, 20));
        bestFocusCycle.setValue(Integer.parseInt("1"));
        bestFocusCycle.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor)bestFocusCycle.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        jPanel4.add(bestFocusCycle);

        val13.setText("1-15");
        //val13.setInputVerifier(integerVerifier);
        val13.setMaximumSize(new java.awt.Dimension(3000, 20));
        val13.setMinimumSize(new java.awt.Dimension(300, 20));
        val13.setPreferredSize(new java.awt.Dimension(3000, 20));
        val13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val13ActionPerformed(evt);
            }
        });
        jPanel4.add(val13);

        val14.setMaximumSize(new java.awt.Dimension(3000, 20));
        val14.setMinimumSize(new java.awt.Dimension(300, 20));
        val14.setPreferredSize(new java.awt.Dimension(3000, 20));
        val14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val14ActionPerformed(evt);
            }
        });
        jPanel4.add(val14);

        val15.setMaximumSize(new java.awt.Dimension(3000, 20));
        val15.setMinimumSize(new java.awt.Dimension(300, 20));
        val15.setPreferredSize(new java.awt.Dimension(3000, 20));
        val15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val15ActionPerformed(evt);
            }
        });
        jPanel4.add(val15);

        val16.setModel(new DefaultComboBoxModel<>(new String[] { "snake" }));
        val16.setMaximumSize(new java.awt.Dimension(3000, 20));
        val16.setMinimumSize(new java.awt.Dimension(300, 20));
        val16.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(val16);

        val17.setText("3");
        val17.setInputVerifier(integerVerifier);
        val17.setMaximumSize(new java.awt.Dimension(3000, 20));
        val17.setMinimumSize(new java.awt.Dimension(300, 20));
        val17.setPreferredSize(new java.awt.Dimension(3000, 20));
        val17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val17ActionPerformed(evt);
            }
        });
        jPanel4.add(val17);

        val18.setText("3");
        val18.setInputVerifier(integerVerifier);
        val18.setMaximumSize(new java.awt.Dimension(3000, 20));
        val18.setMinimumSize(new java.awt.Dimension(300, 20));
        val18.setPreferredSize(new java.awt.Dimension(3000, 20));
        val18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val18ActionPerformed(evt);
            }
        });
        jPanel4.add(val18);

        val19.setText("576");
        val19.setInputVerifier(integerVerifier);
        val19.setInputVerifier(integerVerifier);
        val19.setMaximumSize(new java.awt.Dimension(3000, 20));
        val19.setMinimumSize(new java.awt.Dimension(300, 20));
        val19.setPreferredSize(new java.awt.Dimension(3000, 20));
        val19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val19ActionPerformed(evt);
            }
        });
        jPanel4.add(val19);

        val20.setText("432");
        val20.setInputVerifier(integerVerifier);
        val20.setMaximumSize(new java.awt.Dimension(3000, 20));
        val20.setMinimumSize(new java.awt.Dimension(300, 20));
        val20.setPreferredSize(new java.awt.Dimension(3000, 20));
        val20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val20ActionPerformed(evt);
            }
        });
        jPanel4.add(val20);

        jPanel1.setPreferredSize(new java.awt.Dimension(10000, 23));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(rb_HandE_yes);
        rb_HandE_yes.setText("Yes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        jPanel1.add(rb_HandE_yes, gridBagConstraints);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jRadioButton2, gridBagConstraints);

        jPanel4.add(jPanel1);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel17.setText("Experiment Folder");
        jLabel17.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel17.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel17.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel17, gridBagConstraints);

        jLabel24.setText("Experiment Name");
        jLabel24.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel24.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel24.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel24, gridBagConstraints);

        jLabel1.setText("Project");
        jLabel1.setMaximumSize(new java.awt.Dimension(1000, 20));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel1.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel1, gridBagConstraints);

        jLabel9.setText("CODEX instrument");
        jLabel9.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel9.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel9.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel9, gridBagConstraints);

        jLabel3.setText("Microscope");
        jLabel3.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Deconvolution");
        jLabel4.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel4.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel4, gridBagConstraints);

        jLabel29.setText("Objective Type");
        jLabel29.setMaximumSize(new java.awt.Dimension(40, 20));
        jLabel29.setMinimumSize(new java.awt.Dimension(40, 20));
        jLabel29.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel29, gridBagConstraints);

        jLabel5.setText("Magnification (x)");
        jLabel5.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel5.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel5.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel5, gridBagConstraints);

        jLabel10.setText("Numerican Aperture");
        jLabel10.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel10.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel10.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel10, gridBagConstraints);

        jLabel6.setText("Lateral resolution (nm/pixel)");
        jLabel6.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel6.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel6.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel6, gridBagConstraints);

        jLabel8.setText("Z pitch (nm)");
        jLabel8.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel8.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel8.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel8, gridBagConstraints);

        jLabel12.setText("Number of Z-slices");
        jLabel12.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel12.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel12.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Color mode");
        jLabel13.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel13.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel13.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel13, gridBagConstraints);

        jLabel14.setText("Channel Names (; del)");
        jLabel14.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel14.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel14.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel14, gridBagConstraints);

        jLabel27.setText("Emission wavelengths (; del)");
        jLabel27.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel27.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel27.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel27, gridBagConstraints);

        jLabel15.setText("Drift compensation channel index");
        jLabel15.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel15.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel15.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel15, gridBagConstraints);

        driftReferenceLabel.setText("Drift compensation reference cycle");
        driftReferenceLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        driftReferenceLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        driftReferenceLabel.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(driftReferenceLabel, gridBagConstraints);

        bestFocusChannelLabel.setText("Best focus channel");
        bestFocusChannelLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        bestFocusChannelLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        bestFocusChannelLabel.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(bestFocusChannelLabel, gridBagConstraints);

        bestFocusCycleLabel.setText("Best focus cycle");
        bestFocusCycleLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        bestFocusCycleLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        bestFocusCycleLabel.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(bestFocusCycleLabel, gridBagConstraints);

        jLabel16.setText("Number of cycles/Range");
        jLabel16.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel16.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel16.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel16, gridBagConstraints);


        jLabel25.setText("Region indices (; del)");
        jLabel25.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel25.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel25.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel25, gridBagConstraints);

        jLabel18.setText("Region names (; del)");
        jLabel18.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel18.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel18.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel18, gridBagConstraints);

        jLabel20.setText("Tiling Mode");
        jLabel20.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel20.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel20.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel20, gridBagConstraints);

        jLabel19.setText("Region Size X");
        jLabel19.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel19.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel19.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel19, gridBagConstraints);

        jLabel22.setText("Region Size Y");
        jLabel22.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel22.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel22.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel22, gridBagConstraints);

        jLabel23.setText("Tile Overlap X (pixels)");
        jLabel23.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel23.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel23.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel23, gridBagConstraints);

        jLabel28.setText("Tile Overlap Y (pixels)");
        jLabel28.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel28.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel28.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel28, gridBagConstraints);

        jLabel21.setText("H&E staining");
        jLabel21.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel21.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel21.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel21, gridBagConstraints);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                .addGap(9, 9, 9))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        optionalFragmentLabel = new JLabel();
        focussingOffsetLabel = new JLabel();

        optionalPanel = new JPanel();
        optionalPanel.setBorder(BorderFactory.createTitledBorder("Optional Details for experiment"));
        optionalPanel.setLayout(new GridBagLayout());

        optionalFragmentLabel.setText("Focusing fragment");
        optionalFragmentLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        optionalFragmentLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        optionalFragmentLabel.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        //gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        optionalPanel.add(optionalFragmentLabel, gridBagConstraints);

        optionalFragmentButton = new JComboBox<String>();
        optionalFragmentButton.setModel(new DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        optionalFragmentButton.setSelectedItem("Yes");
        optionalFragmentButton.setMaximumSize(new java.awt.Dimension(100, 20));
        optionalFragmentButton.setMinimumSize(new java.awt.Dimension(40, 20));
        optionalFragmentButton.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        optionalPanel.add(optionalFragmentButton, gridBagConstraints);

        focussingOffsetLabel.setText("Focussing offset");
        optionalFragmentLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        optionalFragmentLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        optionalFragmentLabel.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        //gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        optionalPanel.add(focussingOffsetLabel, gridBagConstraints);

        focussingOffset = new JSpinner();
        focussingOffset.setModel(new SpinnerNumberModel(0, -100, 100, 1));
        focussingOffset.setMaximumSize(new java.awt.Dimension(100, 20));
        focussingOffset.setMinimumSize(new java.awt.Dimension(40, 20));
        focussingOffset.setPreferredSize(new java.awt.Dimension(50, 20));
        focussingOffset.setValue(Integer.parseInt("0"));
        focussingOffset.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor) focussingOffset.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        optionalPanel.add(focussingOffset, gridBagConstraints);


        this.setLayout(new BorderLayout());
        this.add(jPanel2, BorderLayout.PAGE_START);
        this.add(optionalPanel, BorderLayout.PAGE_END);

    }// </editor-fold>//GEN-END:initComponents

    private void txtDirMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDirMouseReleased
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            File expJS = new File(jfc.getSelectedFile().getAbsolutePath() + File.separator + "Experiment.json");
            if (expJS.exists()) {
                try {
                    load(Experiment.loadFromJSON(expJS));
                } catch (Exception e) {
                    logger.showException(e);
                }
            } else {
                String err = guessValues(jfc.getSelectedFile());
                if (err.length() > 0) {
                    JOptionPane.showMessageDialog(this, err);
                    throw new IllegalStateException(err);
                }
            }

            txtDir.setText(jfc.getSelectedFile().getAbsolutePath());

            //Include the name of the experiment to be set as folder name
            val1.setText(jfc.getSelectedFile().getName());

            fireStateChanged();

        }
    }//GEN-LAST:event_txtDirMouseReleased

    private void fireStateChanged() {
        PropertyChangeListener[] chl = this.getListeners(PropertyChangeListener.class);
        for (PropertyChangeListener c : chl) {
            c.propertyChange(new PropertyChangeEvent(this, "dir", "...", txtDir.getText()));
        }
    }

    public String getPath() {
        return txtDir.getText();
    }

    public Experiment getExperiment() {
        return buildExperiment();
    }

    /*
    Method to find the total number of Cycle folders present in the experiment directory.
     */
    public static int getMaxCycNumberFromFolder(File dir) {
        ArrayList<Integer> cycNumbers = new ArrayList<Integer>();
        if (dir != null) {
            for (File cyc : dir.listFiles()) {
                if (cyc != null && cyc.isDirectory() && cyc.getName().startsWith("Cyc")) {
                    String cycFolderName = cyc.getName();
                    String[] cycVal = cycFolderName.split("_");
                    cycNumbers.add(Integer.parseInt(cycVal[0].replaceAll("[^0-9]", "")));
                }
            }
        }
        Collections.sort(cycNumbers, Collections.reverseOrder());
        return cycNumbers == null || cycNumbers.isEmpty() ? 0 : cycNumbers.get(0);
    }

    /*
    Method to check if the product of Region Size X and Y is equal to the total number of tiles
    @return returns true if equal
     */
    public boolean isTilesAProductOfRegionXAndY(File dir) {
        if(dir != null) {
            for (File cyc : dir.listFiles()) {
                if (cyc != null && cyc.isDirectory() && cyc.getName().startsWith("Cyc")) {
                    File[] cycFiles = cyc.listFiles();
                    Arrays.sort(cycFiles, Collections.reverseOrder());
                    for (File tif : cycFiles) {
                        if (tif != null && !tif.isDirectory() && tif.getName().endsWith(".tif")) {
                            int lastZIndex = tif.getName().lastIndexOf("Z");
                            String regXYNumber = tif.getName().substring(lastZIndex-5, lastZIndex-1);
                            if (regXYNumber != null) {
                                int regXYIndex = Integer.parseInt(regXYNumber);
                                if (regXYIndex == Integer.parseInt(val17.getText()) * Integer.parseInt(val18.getText())) {
                                    return true;
                                }
                                else {
                                    return false;
                                }
                            }
                            break;
                        }
                    }
                    //break outer loop
                    break;
                }
            }
        }
        return false;
    }

    /*
    Method to check if channelNames.txt file is present in the experiment folder
     */
    public boolean isChannelNamesPresent(File dir) {
        File chNames = new File(dir + File.separator + "channelNames.txt");
        return chNames == null ? false : (!chNames.isDirectory() && chNames.exists());
    }


        private String guessValues(File dir) {

        StringBuilder err = new StringBuilder();

        int maxRegion = 0;
        int maxCycle = 0;

        boolean containsBcf = false;
        boolean hasHandE = false;

        for (File f : dir.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return pathname.isDirectory() && pathname.getName().startsWith("Cyc");
            }
        })) {
            if (!containsBcf) {
                containsBcf = f.listFiles(new FileFilter() {
                    @Override
                    public boolean accept(File pathname) {
                        return pathname.getName().endsWith(".bcf");
                    }
                }).length > 0;
            }
            if (containsBcf) {
                val3.setSelectedItem("Keyence BZ-X710");
            }
            String[] s = f.getName().split("_");
            int cyc = Integer.parseInt(s[0].substring(3));
            int reg = Integer.parseInt(s[1].substring(3));

            maxRegion = Math.max(reg, maxRegion);
            maxCycle = Math.max(cyc, maxCycle);
        }

        int[][] occup_table = new int[maxCycle][maxRegion];

        for (File f : dir.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return pathname.isDirectory() && pathname.getName().startsWith("Cyc");
            }
        })) {
            if (!containsBcf) {
                containsBcf = f.listFiles(new FileFilter() {
                    @Override
                    public boolean accept(File pathname) {
                        return pathname.getName().endsWith(".bcf");
                    }
                }).length > 0;
            }
            String[] s = f.getName().split("_");
            int cyc = Integer.parseInt(s[0].substring(3));
            int reg = Integer.parseInt(s[1].substring(3));
            occup_table[cyc - 1][reg - 1]++;
        }

        for (int cyc = 1; cyc <= occup_table.length; cyc++) {
            for (int reg = 1; reg <= occup_table[cyc - 1].length; reg++) {
                if (occup_table[cyc - 1][reg - 1] == 0) {
                    err.append("Missing data: cycle=").append(String.valueOf(cyc)).append(", region=").append(String.valueOf(reg)).append("\n");
                }
                if (occup_table[cyc - 1][reg - 1] > 1) {
                    err.append("Duplicate data: cycle=").append(String.valueOf(cyc)).append(", region=").append(String.valueOf(reg)).append(". Delete duplicate folders before proceeding\n");
                }
            }
        }

        File[] hef = dir.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return pathname.isDirectory() && pathname.getName().startsWith("HandE");
            }
        });

        hasHandE = (hef.length == maxRegion)&&hef.length> 0;

        if (!hasHandE && hef.length > 0) {
            err.append("The experiment has HandE folders, but their number is less than a number of regions");
        }

        if (hasHandE) {
            rb_HandE_yes.setSelected(true);
            maxCycle++;
        }

        rb_HandE_yes.setSelected(hasHandE);

        //val13.setText(String.valueOf(maxCycle));
        val13.setText("");

        String regTxt = "1";
        String regNames = "Region 1";

        for (int i = 2; i <= maxRegion; i++) {
            regTxt += ";" + i;
            regNames += ";Region " + i;
        }

        val14.setText(regTxt);
        val15.setText(regNames);

        guessZSlices(dir);
        guessChannelNamesAndWavelength(dir);
        guessCycleRange(dir);

        return err.length() == 0 ? "" : ("Following errors were found in the experiment:\n" + err.toString());
    }


    /*
        Set the number of Z-indices after reading it from the experiment folder
     */
    private void guessZSlices(File dir) {

        if(dir != null) {
            for (File cyc : dir.listFiles()) {
                if (cyc != null && cyc.isDirectory() && cyc.getName().startsWith("Cyc")) {
                    File[] cycFiles = cyc.listFiles();
                    Arrays.sort(cycFiles, Collections.reverseOrder());
                    for (File tif : cycFiles) {
                        if (tif != null && !tif.isDirectory() && tif.getName().endsWith(".tif")) {
                            int lastZIndex = tif.getName().lastIndexOf("Z");
                            String zNumber = tif.getName().substring(lastZIndex+1, lastZIndex+4);
                            if (zNumber != null) {
                                int zIndex = Integer.parseInt(zNumber);
                                zNumber = String.valueOf(zIndex);
                            }
                            val9.setText(zNumber);
                            break;
                        }
                    }
                    //break outer loop
                    break;
                }
            }
        }
    }

    /*
        Set the channel names after reading from experiment folder
        TO DO - The guess should also support different kinds of microscope.
        Create an interface for guess all these values using the methods and make diffrent micscrope classses
        implement this interface so that it could be reusable.
     */
    private void guessChannelNamesAndWavelength(File dir) {
        if(dir != null) {
            for (File cyc : dir.listFiles()) {
                if (cyc != null && cyc.isDirectory() && cyc.getName().startsWith("Cyc")) {
                    File[] cycFiles = cyc.listFiles();
                    Arrays.sort(cycFiles, Collections.reverseOrder());
                    HashMap<String, Boolean> chVsBool = new HashMap<String, Boolean>();
                    chVsBool.put("CH1", false);
                    chVsBool.put("CH2", false);
                    chVsBool.put("CH3", false);
                    chVsBool.put("CH4", false);
                    for (File tif : cycFiles) {
                        if (tif != null && !tif.isDirectory() && tif.getName().endsWith(".tif")) {
                            int last_Index = tif.getName().lastIndexOf("_");
                            String chNumber = tif.getName().substring(last_Index+1, last_Index+4);
                            if (chNumber != null) {
                                if(chVsBool.containsKey(chNumber)){
                                    chVsBool.put(chNumber, true);
                                }
                            }
                        }
                    }
                    HashMap<String, String> chVsWavelength = new HashMap<String, String>();
                    chVsWavelength.put("CH1","425");
                    chVsWavelength.put("CH2","525");
                    chVsWavelength.put("CH3","595");
                    chVsWavelength.put("CH4","670");

                    String ch="";
                    String waveL="";

                    boolean first = true;
                    for (String key: chVsBool.keySet()) {
                        if (!first && chVsBool.get(key)) {
                            ch += ";"+key;
                            waveL += ";"+chVsWavelength.get(key);
                        }
                        else {
                            if(chVsBool.get(key)) {
                                first = false;
                                ch += key;
                                waveL += chVsWavelength.get(key);
                            }
                        }
                    }
                    val11.setText(ch);
                    val21.setText(waveL);
                    //break outer loop
                    break;
                }
            }
        }
    }

    /*
    Set the number of cyles/range field depending upon the content of Experiment folder.
    */
    private void guessCycleRange(File dir) {
        int lowL = 1;
        int upL = getMaxCycNumberFromFolder(dir);
        if(upL == 0) {
            val13.setText(String.valueOf(lowL));
        }
        else {
            val13.setText(String.valueOf(lowL) + "-" + String.valueOf(upL));
        }
    }

    /*
    Method to load the values from the JSON file and set it to the Experiment property
     */
    private void load(Experiment exp) throws FileNotFoundException {
        val1.setText(exp.name);
        val2.setText(exp.codex_instrument);
        val3.setSelectedItem(exp.microscope);
        val4.setSelectedItem(exp.deconvolution);
        val23.setSelectedItem(exp.objectiveType);// out of order
        val5.setText(String.valueOf(exp.magnification));
        val6.setText(String.valueOf(exp.numerical_aperture));
        val7.setText(String.valueOf(exp.per_pixel_XY_resolution));
        val8.setText(String.valueOf(exp.z_pitch));
        val9.setText(String.valueOf(exp.num_z_planes));
        val10.setSelectedItem(exp.channel_arrangement);
        val11.setText(util.concat(exp.channel_names));
        val21.setText(util.concat(exp.emission_wavelengths)); //OUT OF ORDER
        val12.setValue(exp.drift_comp_channel);
        driftReference.setValue(exp.driftCompReferenceCycle);
        bestFocusChannel.setValue(exp.best_focus_channel);
        bestFocusCycle.setValue(exp.bestFocusReferenceCycle);
        if(exp.cycle_upper_limit != exp.cycle_lower_limit) {
            val13.setText(String.valueOf(exp.cycle_lower_limit) + "-" + String.valueOf(exp.cycle_upper_limit));
        }
        else {
            val13.setText(String.valueOf(exp.cycle_lower_limit));
        }
        val14.setText(util.concat(exp.regIdx));
        val15.setText(util.concat(exp.region_names));
        val16.setSelectedItem(exp.tiling_mode);
        val17.setText(String.valueOf(exp.region_width));
        val18.setText(String.valueOf(exp.region_height));
        val19.setText(String.valueOf(exp.tile_overlap_X));
        val20.setText(String.valueOf(exp.tile_overlap_Y));
        rb_HandE_yes.setSelected(exp.HandEstain);
        optionalFragmentButton.setSelectedItem(Boolean.toString(exp.optionalFocusFragment) == null ? "Yes" : Boolean.toString(exp.optionalFocusFragment).equalsIgnoreCase("true") ? "Yes" : "No");
        focussingOffset.setValue(exp.focusing_offset);
    }

    private Experiment buildExperiment() {
        Date date = Calendar.getInstance().getTime();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String formattedDate = sdf.format(date);

        String[] regIds = val14.getText().split(";");
        int[] reg = new int[regIds.length];
        for (int i = 0; i < reg.length; i++) {
            reg[i] = Integer.parseInt(regIds[i]);
        }

        String[] wavelenS = val21.getText().split(";");
        int[] wavelen = new int[wavelenS.length];
        for (int i = 0; i < wavelen.length; i++) {
            wavelen[i] = Integer.parseInt(wavelenS[i]);
        }

        if (txtDir.getText().equals("...")) {
            throw new IllegalStateException("Folder not set");
        }

        if (val1.getText().equals("<Experiment name>")) {
            throw new IllegalStateException("Experiment name not set");
        }

        File dir = new File(txtDir.getText());

        File[] subdir = dir.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return pathname.isDirectory() && pathname.getName().startsWith("Cyc");
            }

        });

        String projName = "p";

        if (val3.getSelectedItem().toString().startsWith("Keyence")) {
            if (subdir.length == 0) {
                System.out.println("Directory does not contain a single folder starting with 'Cyc...'. Please try again!");
                throw new IllegalStateException("Directory" + dir.getAbsolutePath() + " does not contain a single folder starting with 'Cyc...'");
            }

            File[] bcf = subdir[0].listFiles(new FileFilter() {
                @Override
                public boolean accept(File pathname) {
                    return pathname.getName().endsWith(".bcf");
                }
            });

            if (bcf.length == 0) {
                throw new IllegalStateException("Microscope is set to Keyence but there is no .bcf file in the directory ");
            }

            projName = bcf[0].getName().substring(0, bcf[0].getName().indexOf('.'));

        }

        //New feature to support range for number of cycles
        String cyc = val13.getText();
        int count = 0;
        for( int i=0; i<cyc.length(); i++ ) {
            if( cyc.charAt(i) == '-' ) {
                count++;
            }
        }
        int lowerCycLimit = 0;
        int upperCycLimit = 0;
        if(count == 0) {
            lowerCycLimit = StringUtils.isNumeric(val13.getText()) ? Integer.parseInt(val13.getText()) : Integer.MIN_VALUE;
            upperCycLimit = lowerCycLimit;
            if(lowerCycLimit == 0) {
                JOptionPane.showMessageDialog(this, "The number of cycles/range cannot be 0.");
                throw new IllegalStateException("The number of cycles/range cannot be 0.");
            }
            if(lowerCycLimit == Integer.MIN_VALUE) {
                JOptionPane.showMessageDialog(this, "The number of cycles is not a number. Please enter a number or range.");
                throw new IllegalStateException("The number of cycles is not a number. Please enter a number or range.");
            }
            if(Integer.parseInt(driftReference.getValue().toString()) > lowerCycLimit) {
                JOptionPane.showMessageDialog(this, "Drift compensation reference cycle is invalid.");
                throw new IllegalStateException("Drift compensation reference cycle is invalid.");
            }
            if(Integer.parseInt(bestFocusCycle.getValue().toString()) > lowerCycLimit) {
                JOptionPane.showMessageDialog(this, "Best focus cycle is invalid.");
                throw new IllegalStateException("Best focus cycle is invalid.");
            }
        }
        else if(count == 1) {
            String[] cycLimits = val13.getText().split("-");
            if(cycLimits != null && cycLimits.length != 0) {
                lowerCycLimit = StringUtils.isNumeric(cycLimits[0]) ? Integer.parseInt(cycLimits[0]) : Integer.MIN_VALUE;
                upperCycLimit = StringUtils.isNumeric(cycLimits[1]) ? Integer.parseInt(cycLimits[1]) : Integer.MAX_VALUE;
            }
            if(lowerCycLimit > upperCycLimit) {
                JOptionPane.showMessageDialog(this, "The lower limit on the range of number of cycles cannot be greater than the upper limit.");
                throw new IllegalStateException("The lower limit on the range of number of cycles cannot be greater than the upper limit.");
            }
            if(lowerCycLimit == upperCycLimit) {
                JOptionPane.showMessageDialog(this, "The lower limit on the range of number of cycles cannot be equal to the upper limit.");
                throw new IllegalStateException("The lower limit on the range of number of cycles cannot be equal to the upper limit.");
            }
            if(lowerCycLimit == Integer.MIN_VALUE) {
                JOptionPane.showMessageDialog(this, "The lower limit on the range of number of cycles is not a number. Please enter a number.");
                throw new IllegalStateException("The lower limit on the range of number of cycles is not a number. Please enter a number.");
            }
            if(upperCycLimit == Integer.MAX_VALUE) {
                JOptionPane.showMessageDialog(this, "The upper limit on the range of number of cycles is not a number. Please enter a number.");
                throw new IllegalStateException("The upper limit on the range of number of cycles is not a number. Please enter a number.");
            }
            if(lowerCycLimit < 1) {
                JOptionPane.showMessageDialog(this, "The lower limit on the range of number of cycles is invalid.");
                throw new IllegalStateException("The lower limit on the range of number of cycles is invalid.");
            }
            if(upperCycLimit > getMaxCycNumberFromFolder(dir)) {
                JOptionPane.showMessageDialog(this, "The upper limit on the range of number of cycles is invalid.");
                throw new IllegalStateException("The upper limit on the range of number of cycles is invalid.");
            }
            if(Integer.parseInt(driftReference.getValue().toString()) < lowerCycLimit || Integer.parseInt(driftReference.getValue().toString()) > upperCycLimit) {
                JOptionPane.showMessageDialog(this, "Drift compensation reference cycle is invalid.");
                throw new IllegalStateException("Drift compensation reference cycle is invalid.");
            }
            if(Integer.parseInt(bestFocusCycle.getValue().toString()) < lowerCycLimit || Integer.parseInt(bestFocusCycle.getValue().toString()) > upperCycLimit) {
                JOptionPane.showMessageDialog(this, "Best focus cycle is invalid.");
                throw new IllegalStateException("Best focus cycle is invalid.");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Please enter a valid number or range for number of cycles.");
            throw new IllegalStateException("Please enter a valid number or range for number cycles.");
        }

        return new Experiment(val1.getText(),
                formattedDate,
                val2.getText(),
                val3.getSelectedItem().toString(),
                val4.getSelectedItem().toString(),
                Integer.valueOf(val5.getText()),
                Double.parseDouble(val6.getText()),
                Double.parseDouble(val7.getText()),
                Double.parseDouble(val8.getText()),
                Integer.parseInt(val9.getText()),
                (String) val10.getSelectedItem(),
                val11.getText().split(";"),
                wavelen,
                Integer.parseInt(val12.getValue().toString()),
                Integer.parseInt(driftReference.getValue().toString()),
                Integer.parseInt(bestFocusCycle.getValue().toString()),
                Integer.parseInt(bestFocusChannel.getValue().toString()),
                lowerCycLimit,
                upperCycLimit,
                reg,
                val15.getText().split(";"),
                (String) val16.getSelectedItem(),
                Integer.parseInt(val17.getText()),
                Integer.parseInt(val18.getText()),
                Integer.parseInt(val19.getText()),
                Integer.parseInt(val20.getText()),
                val23.getSelectedItem().toString(),
                rb_HandE_yes.isSelected(),
                projName,
                "Yes".equalsIgnoreCase(optionalFragmentButton.getSelectedItem().toString()),
                Integer.parseInt(focussingOffset.getValue().toString())
        );
    }

    private final InputVerifier driftCompChVerifier = new InputVerifier() {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                int val = Integer.parseInt(tf.getText());
                if (val < 1 || val > val11.getText().split(";").length) {
                    throw new NumberFormatException("The value should be between 1 and the number of entries in the channel names list");
                }
                return true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(ExperimentView.this, "Not a valid integer:" + e.getMessage());
                return false;

            }
        }
    };

    private final InputVerifier integerVerifier = new InputVerifier() {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                int val = Integer.parseInt(tf.getText());
                if (val < 1) {
                    throw new NumberFormatException("the number must be 1 or greater");
                }
                return true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(ExperimentView.this, "Not a valid integer: " + e.getMessage());
                return false;
            }
        }
    };

    private final InputVerifier doubleVerifier = new InputVerifier() {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                double val = Double.parseDouble(tf.getText());
                if (val <= 0) {
                    throw new NumberFormatException("the number cannot be negative or zero");
                }
                return true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(ExperimentView.this, "Not a valid floating-point number: " + e.getMessage());
                return false;

            }
        }
    };

    private void txtDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDirActionPerformed

    }//GEN-LAST:event_txtDirActionPerformed

    private void val1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val1ActionPerformed

    private void val2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val2ActionPerformed

    private void val5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val5ActionPerformed

    private void val6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val6ActionPerformed

    private void val7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val7ActionPerformed

    private void val8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val8ActionPerformed

    private void val9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val9ActionPerformed

    private void val11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val11ActionPerformed

    private void val21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val21ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val21ActionPerformed

    private void val12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val12ActionPerformed

    private void val13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val13ActionPerformed

    private void val14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val14ActionPerformed

    private void val15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val15ActionPerformed

    private void val17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val17ActionPerformed

    private void val18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val18ActionPerformed

    private void val19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val19ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val19ActionPerformed

    private void val20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val20ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private JLabel driftReferenceLabel;
    private JLabel bestFocusCycleLabel;
    private JLabel bestFocusChannelLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton2;
    private JTextField jTextField1;
    private javax.swing.JRadioButton rb_HandE_yes;
    private JTextField txtDir;
    private JTextField val1;
    private javax.swing.JComboBox<String> val10;
    private JTextField val11;
    private JSpinner val12;
    private JTextField val13;
    private JTextField val14;
    private JTextField val15;
    private javax.swing.JComboBox<String> val16;
    private JTextField val17;
    private JTextField val18;
    private JTextField val19;
    private JTextField val2;
    private JTextField val20;
    private JTextField val21;
    private javax.swing.JComboBox<String> val23;
    private javax.swing.JComboBox<String> val3;
    private javax.swing.JComboBox<String> val4;
    private JTextField val5;
    private JTextField val6;
    private JTextField val7;
    private JTextField val8;
    private JTextField val9;
    private JSpinner driftReference;
    private JSpinner bestFocusCycle;
    private JSpinner bestFocusChannel;
    private JLabel optionalFragmentLabel;
    private JLabel focussingOffsetLabel;
    private JComboBox<String> optionalFragmentButton;
    private JSpinner focussingOffset;
    private JPanel optionalPanel;
    // End of variables declaration//GEN-END:variables
}
