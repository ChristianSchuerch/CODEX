/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.akoya.codex.upload;

import javax.swing.*;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.*;

/**
 *
 * @author Nikolay Samusik
 */
public class frmMain extends javax.swing.JFrame {

    private JTextArea textArea = new JTextArea(15,30);
    private TextAreaOutputStream taOutputStream = new TextAreaOutputStream(textArea, "");

    /**
     * Creates new form frmMain
     */
    public frmMain() {
        System.setOut(new PrintStream(taOutputStream));
        initComponents();
        experimentView.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                File dir = new File(experimentView.getPath());
                File poFile = new File(dir + File.separator + "processingOptions.json");
                try {
                    uploadOptionsView.load(ProcessingOptions.load(poFile));
                } catch (Exception e) {
                    log("Failed to load processingOptions.json file");
                }
            }
        }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        experimentView = new com.akoya.codex.upload.ExperimentView();
        uploadOptionsView = new com.akoya.codex.upload.ProcessingOptionsView();
        prg = new javax.swing.JProgressBar();
        cmdStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CODEXuploader v1.4");

        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));
        getContentPane().add(experimentView);
        getContentPane().add(uploadOptionsView);

        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        getContentPane().add(scrollPane);

        prg.setMaximumSize(new java.awt.Dimension(320, 20));
        prg.setMinimumSize(new java.awt.Dimension(10, 20));
        prg.setName(""); // NOI18N
        prg.setPreferredSize(new java.awt.Dimension(146, 20));
        getContentPane().add(prg);

        cmdStart.setText("Start the upload");
        cmdStart.setAlignmentX(0.5F);
        cmdStart.setAlignmentY(0.0F);
        cmdStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdStart.setMaximumSize(new java.awt.Dimension(150, 30));
        cmdStart.setMinimumSize(new java.awt.Dimension(150, 30));
        cmdStart.setPreferredSize(new java.awt.Dimension(150, 30));
        cmdStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStartActionPerformed(evt);
            }
        });
        getContentPane().add(cmdStart);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void cmdStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStartActionPerformed

        new Thread(new Runnable() {
            @Override
            public void run() {
            try {
                File dir = new File(experimentView.getPath());

                Experiment exp = experimentView.getExperiment();

                String experimentJS = exp.toJSON();

                exp.saveToFile(new File(dir + File.separator + "Experiment.json"));

                File poFile = new File(dir + File.separator + "processingOptions.json");

                ProcessingOptions po = uploadOptionsView.getUploadOptions();
                boolean doUpload = po.doUpload();

                po.saveToFile(poFile);

                Uploader upl = doUpload ? new Uploader(po.getDestinationUrl(), po.getNumThreads()) : null;

                if (doUpload) {
                    log("\nAuthorizing...");
                }
                final String token = doUpload ? upl.sendAuthRequest(po.getUsername(), po.getPassword()) : null;
                if (doUpload) {
                    log("\nCreating new experiment...");
                }
                Uploader.FileShareAccess fsa = doUpload ? upl.sendExpCreateRequest(token, experimentJS) : null;
                if (doUpload) {
                    log("\nStarting upload...");
                }

                log("Verifying names...");

                for (File f : dir.listFiles(new FileFilter() {
                    @Override
                    public boolean accept(File file) {
                        return file.isDirectory() && file.getName().startsWith("Cyc");
                    }
                })) {
                    String name = f.getName();
                    String[] s = name.split("_");
                    if (s.length > 2) {
                        f.renameTo(new File(dir + File.separator + s[0] + "_" + s[1]));
                    }
                }
                File f = new File(".\\");

                f.getAbsolutePath();

                boolean chNamesUpl = true;

                if (doUpload) {
                    File chNames = new File(experimentView.getPath() + File.separator + "channelNames.txt");
                    if (!chNames.exists()) {
                        JOptionPane.showMessageDialog(frmMain.this, "channelNames.txt file does not exist in the experiment source folder. please make sure to put it there. \nFormat of the file:"
                                + "single-column text file with names of each channel over cycles");
                        throw new IllegalStateException("");
                    }
                }

                int totalCount = exp.region_names.length * exp.region_width * exp.region_height;

                prg.setMaximum(totalCount);

                int currCnt = 1;

                for (int reg : exp.regIdx) {
                    for (int tile = 1; tile <= exp.region_height * exp.region_width; tile++) {

                        File d = new File(po.getTempDir() + File.separator + Experiment.getDestStackFileName(exp.tiling_mode, tile, reg, exp.region_width));
                        int numTrial = 0;
                        while (!d.exists() && numTrial < 3) {
                            numTrial++;

                            ProcessBuilder pb = new ProcessBuilder("cmd", "/C", "java -Xms5G -Xmx48G -Xmn50m -cp \".\\*\" com.akoya.codex.upload.driffta.Driffta \"" + experimentView.getPath() + "\" \"" + po.getTempDir() + "\" " + String.valueOf(reg) + " " + String.valueOf(tile)); //new ProcessBuilder("cmd", "/C", "start", "/B", "/belownormal", cmd);
                            pb.redirectErrorStream(true);

                            log("Starting process: " + pb.command().toString());
                            Process proc = pb.start();


                            waitAndPrint(proc);
                            log("Driffta done");
                        }

                        if (!d.exists()) {
                            log("Tile processing failed 3 times in a row: " + d.getName());
                        }

                        if (doUpload) {
                            d = new File(po.getTempDir() + File.separator + Experiment.getDestStackFileName(exp.tiling_mode, tile, reg, exp.region_width));
                            if (!d.exists()) {
                                throw new IllegalStateException("Driftcompensation completed, but the result file does not exist:" + d.getPath());
                            } else {
                                logger.print("File exists:" + Experiment.getDestStackFileName(exp.tiling_mode, tile, reg, exp.region_width));
                                upl.uploadFilesMultith(d, fsa, reg, tile, token, 1);
                                if (chNamesUpl) {
                                    upl.uploadFilesMultith(new File(experimentView.getPath() + File.separator + "channelNames.txt"), fsa, 0, 0, token, 1);
                                    chNamesUpl = false;
                                }
                            }
                        }

                        prg.setValue(currCnt++);
                        frmMain.this.repaint();

                    }

                }

                log("Creating montages");

                ProcessBuilder pb = new ProcessBuilder("cmd", "/C start /B /belownormal java -Xms5G -Xmx48G -Xmn50m -cp \".\\*\" com.akoya.codex.upload.driffta.MakeMontage \"" + po.getTempDir() + File.separator + "bestFocus\" 2");
                log("Starting process: " + pb.command().toString());
                pb.redirectErrorStream(true);
                Process proc = pb.start();
                waitAndPrint(proc);

            } catch (Exception e) {
            throw new Error(e);
        }

            }
        }).start();

    }//GEN-LAST:event_cmdStartActionPerformed

    public static void waitAndPrint(Process proc) throws IOException {
        do {
            try {
                BufferedReader brOut = new BufferedReader(new InputStreamReader(proc.getInputStream()));
                String s = null;
                while ((s = brOut.readLine()) != null) {
                    log(s);
                }

                BufferedReader brErr = new BufferedReader(new InputStreamReader(proc.getErrorStream()));

                while ((s = brErr.readLine()) != null) {
                    log("ERROR>" + s);
                }

                Thread.sleep(100);

            } catch (InterruptedException e) {
                log("Process interrupted");
                return;
            }
        } while (proc.isAlive());
        log("Process done");
    }

    public static void log(String s) {
        System.out.println(s);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    frmMain frm = new frmMain();
                    frm.setBounds((Toolkit.getDefaultToolkit().getScreenSize().width - frm.getWidth()) / 2, (Toolkit.getDefaultToolkit().getScreenSize().height - frm.getHeight()) / 2, frm.getWidth(), frm.getHeight());
                    frm.setVisible(true);
                } catch (Throwable e) {
                    logger.showException(e);
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdStart;
    private com.akoya.codex.upload.ExperimentView experimentView;
    private javax.swing.JProgressBar prg;
    private com.akoya.codex.upload.ProcessingOptionsView uploadOptionsView;
    // End of variables declaration//GEN-END:variables
}
